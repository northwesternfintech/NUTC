version: '3'

vars:
  NAME: NUTC
  
  # BOTS, DEV, or NORMAL
  MODE: "NORMAL"
  
  DASHBOARD_ENABLED: True
  
  RELEASE_BUILD: False
  RELEASE_PRESET: "ci-ubuntu"

tasks:
  start-nix:
    cmds:
      - |
        if [ -z "${IN_NIX_SHELL}" ]; then
          nix-shell {{.TASKFILE_DIR}}/../config/shell.nix
        else
          echo "Already in a nix-shell."
        fi

  deps:
    dir: .
    vars:
      BUILD_TYPE: '{{if eq .RELEASE_BUILD "True"}}Release{{else}}Debug{{end}}'
    cmds:
      - conan install . -s build_type={{.BUILD_TYPE}} -b missing -pr cpp20 -pr:b cpp20
    
  fmt:
    dir: .
    cmds:
      - cmake -D FIX=YES -P cmake/lint.cmake
      - cmake -D FIX=YES -P cmake/spell.cmake

  new-log-dir:
    dir: .
    cmds:
      - rm -rf logs
      - mkdir logs

  kill-wrappers:
    cmds:
      - cmd: pkill -f -9 WRAPPER
        ignore_error: true

  init:
    dir: .
    vars:
      DASH_FLAG: '{{if eq .DASHBOARD_ENABLED "True"}}-DDASHBOARD=ON{{else}}{{end}}'
      PRESET: '{{if eq .RELEASE_BUILD "True"}}{{.RELEASE_PRESET}}{{else}}dev{{end}}'
    preconditions:
      - test -f CMakeUserPresets.json
    cmds:
      - cmake --preset={{.PRESET}} {{.DASH_FLAG}}

  build:
    dir: .
    vars:
      CMAKE_SUFFIX: '{{if eq .RELEASE_BUILD "True"}}build --config Release{{else}}--preset=dev{{end}}'
    preconditions:
      - test -f CMakeUserPresets.json
    cmds:
      - cmake --build {{.CMAKE_SUFFIX}} -j 
      
  run-gdb:
    env:
      NUTC_WRAPPER_BINARY_PATH: '{{if eq .RELEASE_BUILD "True"}}./build/WRAPPER{{else}}./build/dev/WRAPPER{{end}}'
    vars:
      NUTC_PATH: '{{if eq .RELEASE_BUILD "True"}}build/{{.NAME}}{{else}}build/dev/{{.NAME}}{{end}}'
    cmds:
      - task: build
      - task: new-log-dir
      - gdb ./{{ .NUTC_PATH }}

  run:
    env:
      NUTC_WRAPPER_BINARY_PATH: '{{if eq .RELEASE_BUILD "True"}}./build/WRAPPER{{else}}./build/dev/WRAPPER{{end}}'
    vars:
      NUTC_PATH: '{{if eq .RELEASE_BUILD "True"}}build/{{.NAME}}{{else}}build/dev/{{.NAME}}{{end}}'
      MODE_FLAG: '{{if eq .MODE "BOTS"}}--bots-only{{else if eq .MODE "DEV"}}--dev{{end}}'
    cmds:
      - task: build
      - task: new-log-dir
      - ./{{ .NUTC_PATH }} {{ .MODE_FLAG }}
      - task: kill-wrappers
      
      # - ./build/dev/{{.NAME}} --sandbox "1Pd1lJUMPURc0ezL393vWwRz9g32" " NgMtXt5Ff_lwqtySBJ9"

  test:
    dir: .
    cmds:
      - task: utest
      - task: itest

  utest:
    dir: '{{if eq .RELEASE_BUILD "True"}}./build{{else}}.{{end}}'
    vars:
      DEV_TEST_FLAGS: '--preset=dev'
      RELEASE_TEST_FLAGS: '--output-on-failure --no-tests=error -C Release'
      TEST_FLAGS: '{{if eq .RELEASE_BUILD "True"}}{{.RELEASE_TEST_FLAGS}}{{else}}{{.DEV_TEST_FLAGS}}{{end}}'
    cmds:
      - task: build
      - ctest {{.TEST_FLAGS}} -R "Unit*"

  itest:
    dir: '.'
    vars:
      TEST_DIR: 'build{{if eq .RELEASE_BUILD "False"}}/dev{{end}}/test'
    cmds:
      - task: build
        # Don't want to check the mode
      - echo $NUTC_WRAPPER_BINARY_PATH
      - cp -r test/test_algos {{.TEST_DIR}}
      - cp config.yml {{.TEST_DIR}}/config.yml
      - task: run-itest

  run-itest:
    dir: '{{if eq .RELEASE_BUILD "False"}}.{{else}}build{{end}}'
    vars:
      WRAPPER_RELATIVE_PATH: './build{{if eq .RELEASE_BUILD "False"}}/dev{{end}}/WRAPPER'
      DEV_TEST_FLAGS: '--timeout 4 --preset=dev'
      RELEASE_TEST_FLAGS: '--output-on-failure --no-tests=error --timeout 10 -C Release'
      TEST_FLAGS: '{{if eq .RELEASE_BUILD "True"}}{{.RELEASE_TEST_FLAGS}}{{else}}{{.DEV_TEST_FLAGS}}{{end}}'
    env:
      NUTC_WRAPPER_BINARY_PATH: '{{.PWD}}/{{.WRAPPER_RELATIVE_PATH}}'
    cmds:
      - ctest {{.TEST_FLAGS}} -R "Integration*" 
