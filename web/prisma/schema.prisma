generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  uid      String     @id
  email    String     @unique
  Resume   Resume[]
  Algo     Algo[]
  profile  Profile?
  AlgoFile AlgoFile[]

  @@map("users")
}

model Algo {
  algoFileKey        String  @id
  name               String  @unique
  description        String
  case               String
  lintResults        String
  sandboxLogFileURL  String?
  lintFailureMessage String?
  lintSuccessMessage String?

  algoFile AlgoFile @relation(fields: [algoFileKey], references: [key])
  uid      String
  user     User     @relation(fields: [uid], references: [uid])

  @@index([uid])
  @@map("algos")
}

model AlgoFile {
  key       String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Algo      Algo?

  uid  String
  user User   @relation(fields: [uid], references: [uid])

  @@map("algo_file")
}

model Profile {
  firstName String
  lastName  String
  school    String
  about     String

  uid  String @id
  user User   @relation(fields: [uid], references: [uid])

  @@map("profiles")
}

model Resume {
  key       String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uid  String
  user User   @relation(fields: [uid], references: [uid])

  @@index([uid])
  @@map("resumes")
}
