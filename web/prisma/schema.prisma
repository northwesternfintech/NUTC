generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

// Token is a secret. Using this token, api routes will accept or reject user
// We need this because just using uid would mean someone could spoof the accept route
model EmailTokens {
  token String @id @default(cuid())
  uid   String

  @@map("email_tokens")
}

enum ParticipantState {
  PRE_REGISTRATION
  WAITING
  REJECTED
  ACCEPTED
}

model User {
  uid              String           @id
  email            String           @unique
  participantState ParticipantState @default(PRE_REGISTRATION)
  Resume           Resume[]
  Algo             Algo[]
  profile          Profile?
  AlgoFile         AlgoFile[]

  @@map("users")
}

model Algo {
  algoFileS3Key      String  @id
  name               String  @unique
  description        String
  case               String
  lintResults        String
  sandboxLogFileURL  String?
  lintFailureMessage String?
  lintSuccessMessage String?

  algoFile AlgoFile @relation(fields: [algoFileS3Key], references: [s3Key])
  uid      String
  user     User     @relation(fields: [uid], references: [uid])

  @@index([uid])
  @@map("algos")
}

model AlgoFile {
  s3Key     String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Algo      Algo?

  uid  String
  user User   @relation(fields: [uid], references: [uid])

  @@map("algo_file")
}

model Profile {
  firstName String
  lastName  String
  school    String
  about     String

  uid  String @id
  user User   @relation(fields: [uid], references: [uid])

  @@map("profiles")
}

model Resume {
  s3Key     String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uid  String
  user User   @relation(fields: [uid], references: [uid])

  @@index([uid])
  @@map("resumes")
}
