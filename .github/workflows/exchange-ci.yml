name: Exchange - Continuous Integration

on:
  push:
    branches:
      - main
    paths:
      - 'exchange/**'
      - '.github/workflows/exchange-ci.yml'

  pull_request:
    branches:
      - main
    paths:
      - 'exchange/**'
      - '.github/workflows/exchange-ci.yml'

  workflow_dispatch:

# We only care about the latest revision of a PR, so cancel all previous instances.
concurrency:
  group: exchange-ci-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: exchange

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v4
      with: { python-version: "3.12" }

    - name: Install LLVM 18
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt update
          sudo apt install llvm-18 llvm-18-dev llvm-18-tools clang-18 clang-tidy-18 clang-format-18 clang-tools-18 libclang-18-dev -y

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-18 -P cmake/lint.cmake

    - name: Spell check
      run: cmake -P cmake/spell.cmake

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: exchange


    env:
      CC: clang-18
      CXX: clang++-18
      CLANG_DIR: '/usr/lib/llvm-18/lib/cmake/clang'
      LLVM_DIR: '/usr/lib/llvm-18/lib/cmake/llvm'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }
        
    - name: Install Python Dev
      uses: actions/setup-python@v4
      with: { python-version: "3.12-dev" }

    - name: Install LLVM 18
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt update
          sudo apt install llvm-18 llvm-18-dev llvm-18-tools clang-18 clang-tidy-18 clang-tools-18 libclang-18-dev -y

    - name: Install Cache Conan dependencies
      id: cache-conan
      uses: actions/cache@v3
      env:
        cache-name: cache-conan-deps
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
        restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

    - name: Install dependencies
      run: |
        pip3 install conan numpy

        sudo apt install libssl-dev -y
        
        bash < ../.github/scripts/conan-profile.sh
        conan install . -s build_type=Release -b missing

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j

    - name: Test
      working-directory: exchange/build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j 2 -R "Unit*"

  unit-test-darwin:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-14]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: exchange

    env:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Verify Installation
      run: |
          ${{ env.CC }} --version
          ${{ env.CXX }} --version

    - name: Install static analyzers
      if: matrix.os == 'macos-14'
      run: brew install cppcheck

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }
          
    - name: Install Python Dev
      uses: actions/setup-python@v4
      with: { python-version: "3.12-dev" }

    - name: Install dependencies
      shell: bash
      run: |
        pip3 install conan numpy
        conan profile detect
        python3 ../.github/scripts/write_config.py
        conan install . -s build_type=Release -b missing

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: exchange/build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2 -R "Unit*"

  unit-test-linux:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-22.04]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: exchange


    env:
      CC: clang-18
      CXX: clang++-18
      CLANG_DIR: '/usr/lib/llvm-18/lib/cmake/clang'
      LLVM_DIR: '/usr/lib/llvm-18/lib/cmake/llvm'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install LLVM 18
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt update
          sudo apt install llvm-18 llvm-18-dev llvm-18-tools clang-18 clang-tidy-18 clang-tools-18 libclang-18-dev -y

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt install cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-18 160

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }
        
    - name: Install Python Dev
      uses: actions/setup-python@v4
      with: { python-version: "3.12-dev" }

    - name: Install Cache Conan dependencies
      id: cache-conan
      uses: actions/cache@v3
      env:
        cache-name: cache-conan-deps
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
        restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

    - name: Install dependencies
      shell: bash
      run: |
        pip3 install conan numpy
        
        sudo apt install libssl-dev -y
        
        bash < ../.github/scripts/conan-profile.sh
        conan install . -s build_type=Release -b missing

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: exchange/build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2 -R "Unit*"

  integration-test:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-22.04]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: exchange

    env:
      CC: clang-18
      CXX: clang++-18
      CLANG_DIR: '/usr/lib/llvm-18/lib/cmake/clang'
      LLVM_DIR: '/usr/lib/llvm-18/lib/cmake/llvm'
      NUTC_WRAPPER_BINARY_PATH: ${{ github.workspace }}/exchange/build/WRAPPER
      NUTC_CPP_TEMPLATE_PATH: ${{ github.workspace }}/exchange/template.cpp
      NUTC_LINTER_SPAWNER_BINARY_PATH: ${{ github.workspace }}/exchange/build/LINTER_spawner

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install LLVM 18
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt update
          sudo apt install llvm-18 llvm-18-dev llvm-18-tools clang-18 clang-tidy-18 clang-tools-18 libclang-18-dev -y

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt install cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-18 160

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }
        
    - name: Install Python Dev
      uses: actions/setup-python@v4
      with: { python-version: "3.12-dev" }

    - name: Install Cache Conan dependencies
      id: cache-conan
      uses: actions/cache@v3
      env:
        cache-name: cache-conan-deps
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
        restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

    - name: Install dependencies
      shell: bash
      run: |
        pip3 install conan numpy
        
        sudo apt install libssl-dev -y
        
        bash < ../.github/scripts/conan-profile.sh
        conan install . -s build_type=Release -b missing

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure exchange
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build exchange
      run: cmake --build build --config Release -j

    - name: Install exchange
      run: cmake --install build --config Release --prefix .

    - name: Move config file
      run: cp config.yml build/test/config.yml

    - name: Move test algo files
      run: cp -r -L test/src/integration/test_algos build/test/test_algos
      
    - name: Test exchange
      working-directory: exchange/build
      run: ctest --output-on-failure --no-tests=error --timeout 10 -C Release -R "Integration*"
