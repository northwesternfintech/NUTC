name: Linter - Continuous Integration

on:
  push:
    branches:
      - main
    paths:
      - 'linter/**'
      - '.github/workflows/linter-cicd.yml'

  pull_request:
    branches:
      - main
    paths:
      - 'linter/**'
      - '.github/workflows/linter-cicd.yml'

  workflow_dispatch:

# We only care about the latest revision of a PR, so cancel all previous instances.
concurrency:
  group: linter-ci-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: linter

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v4
      with: { python-version: "3.12" }

    - name: Install LLVM 17
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main"
          sudo apt update
          sudo apt install llvm-17 llvm-17-dev llvm-17-tools clang-17 clang-tidy-17 clang-format-17 clang-tools-17 libclang-17-dev -y

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-17 -P cmake/lint.cmake

    - name: Spell check
      run: cmake -P cmake/spell.cmake

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: linter


    env:
      CC: clang-17
      CXX: clang++-17
      CLANG_DIR: '/usr/lib/llvm-17/lib/cmake/clang'
      LLVM_DIR: '/usr/lib/llvm-17/lib/cmake/llvm'
      NUTC_SPAWNER_BINARY_PATH: ${{ github.workspace }}/linter/build/sanitize/NUTC-linter-spawner

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }

    - name: Install Python 
      uses: actions/setup-python@v4
      with: { python-version: "3.12-dev" }

    - name: Install LLVM 17
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main"
          sudo apt update
          sudo apt install llvm-17 llvm-17-dev llvm-17-tools clang-17 clang-tidy-17 clang-tools-17 libclang-17-dev -y

    - name: Install Cache Conan dependencies
      id: cache-conan
      uses: actions/cache@v3
      env:
        cache-name: cache-conan-deps
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
        restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

    - name: Install dependencies
      run: |
        pip3 install conan

        sudo apt install libssl-dev -y
        
        bash < ../.github/scripts/conan-profile.sh
        conan install . -s build_type=Release -b missing

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: linter/build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j 2

  test-linux:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-22.04]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: linter


    env:
      CC: clang-17
      CXX: clang++-17
      CLANG_DIR: '/usr/lib/llvm-17/lib/cmake/clang'
      LLVM_DIR: '/usr/lib/llvm-17/lib/cmake/llvm'
      NUTC_SPAWNER_BINARY_PATH: ${{ github.workspace }}/linter/build/NUTC-linter-spawner

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install LLVM 17
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main"
          sudo apt update
          sudo apt install llvm-17 llvm-17-dev llvm-17-tools clang-17 clang-tidy-17 clang-tools-17 libclang-17-dev -y

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt install cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-17 160

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12-dev" }
    
    - name: Install dependencies
      shell: bash
      run: |
        pip3 install conan
        
        sudo apt install libssl-dev -y
        
        bash < ../.github/scripts/conan-profile.sh
        conan install . -s build_type=Release -b missing

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: linter/build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2

  test-darwin:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-14]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: linter

    env:
      CC: /opt/homebrew/opt/llvm@17/bin/clang
      CXX: /opt/homebrew/opt/llvm@17/bin/clang++
      CLANG_DIR: '/opt/homebrew/opt/llvm@17/bin/clang'
      LLVM_DIR: '/opt/homebrew/opt/llvm@17'
      NUTC_SPAWNER_BINARY_PATH: ${{ github.workspace }}/linter/build/NUTC-linter-spawner

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install LLVM 17
      run: |
          brew install llvm@17
          brew install clang-format

    - name: Install static analyzers
      if: matrix.os == 'macos-14'
      run: >-
        brew install cppcheck

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12-dev" }

    - name: Install dependencies
      shell: bash
      run: |
        pip3 install conan 
        conan profile detect
        python3 ../.github/scripts/write_config.py
        conan install . -s build_type=Release -b missing

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: linter/build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2


  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test-darwin, test-linux]

    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: linter


    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'northwesternfintech'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v4
      with: { python-version: "3.12" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt update -q
        && sudo apt install doxygen -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
