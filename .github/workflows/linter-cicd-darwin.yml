name: Linter - Continuous Integration DARWIN

on:
  push:
    branches:
      - main
    paths:
      - 'linter/**'
      - '.github/workflows/linter-cicd-darwin.yml'

  pull_request:
    branches:
      - main
    paths:
      - 'linter/**'
      - '.github/workflows/linter-cicd-darwin.yml'

  workflow_dispatch:

# We only care about the latest revision of a PR, so cancel all previous instances.
concurrency:
  group: linter-ci-darwin-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: macos-14
    defaults:
      run:
        working-directory: linter

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v4
      with: { python-version: "3.12" }

    - name: Install LLVM 17
      run: |
          brew install llvm@17
          brew install clang-format

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format -P cmake/lint.cmake

    - name: Spell check
      run: cmake -P cmake/spell.cmake

  sanitize:
    needs: [lint]

    runs-on: macos-14
    defaults:
      run:
        working-directory: linter


    env:
      CC: /opt/homebrew/opt/llvm/bin/clang
      CXX: /opt/homebrew/opt/llvm/bin/clang++
      CLANG_DIR: '/opt/homebrew/opt/llvm/bin/clang'
      LLVM_DIR: '/opt/homebrew/opt/llvm'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }

    - name: Install Python Developer Headers
      run: brew install python@3.12

    - name: Install LLVM 17
      run: |
          brew install llvm@17
          brew install clang-format

    - name: Install Cache Conan dependencies
      id: cache-conan
      uses: actions/cache@v3
      env:
        cache-name: cache-conan-deps
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
        restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

    - name: Install dependencies
      run: |
        pip3 install conan 
        conan profile detect
        python3 ../.github/scripts/write_config.py
        conan install . -s build_type=Release -b missing

    - name: Configure
      run: cmake --preset=ci-sanitize-darwin

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: linter/build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-14]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: linter


    env:
      CC: /opt/homebrew/opt/llvm/bin/clang
      CXX: /opt/homebrew/opt/llvm/bin/clang++
      CLANG_DIR: '/opt/homebrew/opt/llvm/bin/clang'
      LLVM_DIR: '/opt/homebrew/opt/llvm'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install LLVM 17
      run: |
          brew install llvm@17
          brew install clang-format

    - name: Install static analyzers
      if: matrix.os == 'macos-14'
      run: >-
        brew install cppcheck

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.12" }
    
    - name: Install Python Developer Headers
      run: brew install python@3.12

    - name: Install dependencies
      shell: bash
      run: |
        pip3 install conan 
        conan profile detect
        python3 ../.github/scripts/write_config.py
        conan install . -s build_type=Release -b missing

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: linter/build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2
